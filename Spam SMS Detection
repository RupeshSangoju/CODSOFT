{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9f0134ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:22.807796Z",
     "iopub.status.busy": "2023-10-21T15:25:22.806903Z",
     "iopub.status.idle": "2023-10-21T15:25:23.257270Z",
     "shell.execute_reply": "2023-10-21T15:25:23.255714Z"
    },
    "papermill": {
     "duration": 0.46074,
     "end_time": "2023-10-21T15:25:23.260097",
     "exception": false,
     "start_time": "2023-10-21T15:25:22.799357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/spam-sms-detection/spam.csv\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6ccd1b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:23.275249Z",
     "iopub.status.busy": "2023-10-21T15:25:23.274663Z",
     "iopub.status.idle": "2023-10-21T15:25:23.279449Z",
     "shell.execute_reply": "2023-10-21T15:25:23.278549Z"
    },
    "papermill": {
     "duration": 0.014239,
     "end_time": "2023-10-21T15:25:23.281943",
     "exception": false,
     "start_time": "2023-10-21T15:25:23.267704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a937ac92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:23.294391Z",
     "iopub.status.busy": "2023-10-21T15:25:23.293356Z",
     "iopub.status.idle": "2023-10-21T15:25:23.379750Z",
     "shell.execute_reply": "2023-10-21T15:25:23.378688Z"
    },
    "papermill": {
     "duration": 0.095146,
     "end_time": "2023-10-21T15:25:23.382148",
     "exception": false,
     "start_time": "2023-10-21T15:25:23.287002",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>message</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ham</td>\n",
       "      <td>\"Go until jurong point, crazy.. Available only...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ham</td>\n",
       "      <td>Ok lar... Joking wif u oni...,,,</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spam</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ham</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ham</td>\n",
       "      <td>\"Nah I don't think he goes to usf, he lives ar...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>spam</td>\n",
       "      <td>\"FreeMsg Hey there darling it's been 3 week's ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ham</td>\n",
       "      <td>Even my brother is not like to speak with me. ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ham</td>\n",
       "      <td>As per your request 'Melle Melle (Oru Minnamin...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>spam</td>\n",
       "      <td>WINNER!! As a valued network customer you have...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>spam</td>\n",
       "      <td>Had your mobile 11 months or more? U R entitle...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  label                                            message\n",
       "0   ham  \"Go until jurong point, crazy.. Available only...\n",
       "1   ham                   Ok lar... Joking wif u oni...,,,\n",
       "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...\n",
       "3   ham  U dun say so early hor... U c already then say...\n",
       "4   ham  \"Nah I don't think he goes to usf, he lives ar...\n",
       "5  spam  \"FreeMsg Hey there darling it's been 3 week's ...\n",
       "6   ham  Even my brother is not like to speak with me. ...\n",
       "7   ham  As per your request 'Melle Melle (Oru Minnamin...\n",
       "8  spam  WINNER!! As a valued network customer you have...\n",
       "9  spam  Had your mobile 11 months or more? U R entitle..."
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read the CSV file with the specified parameters\n",
    "df = pd.read_csv(\"/kaggle/input/spam-sms-detection/spam.csv\", sep='\\t', encoding='ISO-8859-1')\n",
    "\n",
    "# Split the 'v1,v2,,,' column into 'label' and 'message' columns based on the comma separator\n",
    "df[['label', 'message']] = df['v1,v2,,,'].str.split(',', n=1, expand=True)\n",
    "\n",
    "# Drop the original 'v1,v2,,,' column if needed\n",
    "df.drop('v1,v2,,,', axis=1, inplace=True)\n",
    "\n",
    "# Print the first 10 rows to verify the result\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b8f07228",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:23.395253Z",
     "iopub.status.busy": "2023-10-21T15:25:23.394234Z",
     "iopub.status.idle": "2023-10-21T15:25:25.940354Z",
     "shell.execute_reply": "2023-10-21T15:25:25.938912Z"
    },
    "papermill": {
     "duration": 2.555936,
     "end_time": "2023-10-21T15:25:25.943497",
     "exception": false,
     "start_time": "2023-10-21T15:25:23.387561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.porter import PorterStemmer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "114d6df9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:25.956325Z",
     "iopub.status.busy": "2023-10-21T15:25:25.955879Z",
     "iopub.status.idle": "2023-10-21T15:25:41.092795Z",
     "shell.execute_reply": "2023-10-21T15:25:41.091257Z"
    },
    "papermill": {
     "duration": 15.146906,
     "end_time": "2023-10-21T15:25:41.095963",
     "exception": false,
     "start_time": "2023-10-21T15:25:25.949057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ps = PorterStemmer()\n",
    "corpus = []\n",
    "for i in range(0, len(df)):\n",
    "    review = re.sub('[^a-zA-Z]', ' ', df['message'][i])\n",
    "    review = review.lower()\n",
    "    review = review.split()\n",
    "    \n",
    "    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n",
    "    review = ' '.join(review)\n",
    "    corpus.append(review)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "328de35c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:41.109290Z",
     "iopub.status.busy": "2023-10-21T15:25:41.108842Z",
     "iopub.status.idle": "2023-10-21T15:25:41.116913Z",
     "shell.execute_reply": "2023-10-21T15:25:41.115392Z"
    },
    "papermill": {
     "duration": 0.017863,
     "end_time": "2023-10-21T15:25:41.119767",
     "exception": false,
     "start_time": "2023-10-21T15:25:41.101904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'go jurong point crazi avail bugi n great world la e buffet cine got amor wat'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpus[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "852980ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:41.134021Z",
     "iopub.status.busy": "2023-10-21T15:25:41.132891Z",
     "iopub.status.idle": "2023-10-21T15:25:41.344395Z",
     "shell.execute_reply": "2023-10-21T15:25:41.343278Z"
    },
    "papermill": {
     "duration": 0.221704,
     "end_time": "2023-10-21T15:25:41.347178",
     "exception": false,
     "start_time": "2023-10-21T15:25:41.125474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "cv = CountVectorizer(max_features=5000)\n",
    "bag_of_words = cv.fit_transform(corpus).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b2e6eba8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:41.360747Z",
     "iopub.status.busy": "2023-10-21T15:25:41.360014Z",
     "iopub.status.idle": "2023-10-21T15:25:41.370192Z",
     "shell.execute_reply": "2023-10-21T15:25:41.368842Z"
    },
    "papermill": {
     "duration": 0.020276,
     "end_time": "2023-10-21T15:25:41.373190",
     "exception": false,
     "start_time": "2023-10-21T15:25:41.352914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "spam_or_not = pd.get_dummies(df['label'])\n",
    "\n",
    "# Select the values of the second column after one-hot encoding\n",
    "spam_or_not = spam_or_not.iloc[:, 1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "60cedc8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:41.386302Z",
     "iopub.status.busy": "2023-10-21T15:25:41.385848Z",
     "iopub.status.idle": "2023-10-21T15:25:41.533374Z",
     "shell.execute_reply": "2023-10-21T15:25:41.531488Z"
    },
    "papermill": {
     "duration": 0.157527,
     "end_time": "2023-10-21T15:25:41.536335",
     "exception": false,
     "start_time": "2023-10-21T15:25:41.378808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(bag_of_words, spam_or_not, test_size = 0.20, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "156f53c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:41.549699Z",
     "iopub.status.busy": "2023-10-21T15:25:41.549225Z",
     "iopub.status.idle": "2023-10-21T15:25:41.740166Z",
     "shell.execute_reply": "2023-10-21T15:25:41.738085Z"
    },
    "papermill": {
     "duration": 0.203825,
     "end_time": "2023-10-21T15:25:41.745762",
     "exception": false,
     "start_time": "2023-10-21T15:25:41.541937",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False, False, False, ..., False, False, False])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "spam_detect_model = MultinomialNB().fit(X_train, y_train)\n",
    "\n",
    "spam_pred=spam_detect_model.predict(X_test)\n",
    "spam_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "88b4afdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:41.776252Z",
     "iopub.status.busy": "2023-10-21T15:25:41.775439Z",
     "iopub.status.idle": "2023-10-21T15:25:41.792838Z",
     "shell.execute_reply": "2023-10-21T15:25:41.790781Z"
    },
    "papermill": {
     "duration": 0.039184,
     "end_time": "2023-10-21T15:25:41.798753",
     "exception": false,
     "start_time": "2023-10-21T15:25:41.759569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1112,    3],\n",
       "       [   0,    0]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_m = confusion_matrix(y_test,spam_pred)\n",
    "confusion_m "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bfdcc64f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-21T15:25:41.827823Z",
     "iopub.status.busy": "2023-10-21T15:25:41.827042Z",
     "iopub.status.idle": "2023-10-21T15:25:41.842720Z",
     "shell.execute_reply": "2023-10-21T15:25:41.840702Z"
    },
    "papermill": {
     "duration": 0.036989,
     "end_time": "2023-10-21T15:25:41.848815",
     "exception": false,
     "start_time": "2023-10-21T15:25:41.811826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9973094170403587"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "accuracy = accuracy_score(y_test,spam_pred)\n",
    "accuracy"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 23.806986,
   "end_time": "2023-10-21T15:25:42.579229",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-10-21T15:25:18.772243",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
